# Docker Compose for local development
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vriddhi-postgres
    environment:
      POSTGRES_USER: vriddhi_user
      POSTGRES_PASSWORD: vriddhi_password
      POSTGRES_DB: vriddhi_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vriddhi_user -d vriddhi_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: vriddhi-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vriddhi-api
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://vriddhi_user:vriddhi_password@postgres:5432/vriddhi_db
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=DEBUG
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8501
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Database Migration Service
  migration:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vriddhi-migration
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://vriddhi_user:vriddhi_password@postgres:5432/vriddhi_db
    volumes:
      - ./scripts:/app/scripts
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "scripts/migrate_csv_to_db.py"]
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: vriddhi-network